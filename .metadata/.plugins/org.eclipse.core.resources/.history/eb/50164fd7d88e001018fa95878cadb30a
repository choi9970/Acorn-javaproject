package DashBoard;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.List;

public class BoardManager {
	Scanner sc = new Scanner(System.in);
	List<Board> list = new ArrayList<Board>();
	public void postCreate(String writer, String title, String content) {
			list .clear();
	        Date regDate=nowDate();
	        //public Board(int id, String title, String content, String writer, Date regDate) {
	        list.add(new Board(enterNumber(), title, content, writer,nowDate()));
	     // 파일쓰기 (append 모드)
	        try {
	        	File folder = new File("DataBase");
	        	
	        	if (!folder.exists()) {
	        	    folder.mkdir(); // 폴더 생성
	        	}
	        	FileWriter fw = new FileWriter("DataBase/data.csv", true);
	        
	             PrintWriter pw = new PrintWriter(fw);

	            for (int i = 0; i < list.size(); i++) {
	            	pw.println(list.get(i).toCSV());
	            }
	            
	            pw.close(); 
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
		
	}
	//게시글 목록 불러오기
		public void loadData(String fileName) throws IOException {
			list.clear();
			
			BufferedReader br = new BufferedReader(new FileReader(fileName));

			String line;
			while ((line = br.readLine()) != null) {
				String[] parts = line.split(",");
				int id = Integer.parseInt(parts[0].trim());
				String title = parts[1].trim();
				String content = parts[2].trim();
				String writer = parts[3].trim();
				Date regDate = parseDate(parts[4].trim());

				Board board = new Board(id, title, content, writer, regDate);
				list.add(board);
			}
			br.close();
		}
		
		//게시글 조회 (사용자 입력 부분)
		public void postShowChoice() throws IOException {
			System.out.println("\n┌───────────────────────────────┐");
		    System.out.println("│                         📖 게시글 조회 메뉴                          │");
		    System.out.println("├───────────────────────────────┤");
		    System.out.println("│                          [1] 전체 목록 조회                             │");
		    System.out.println("│                          [2] 게시글 상세보기                          │");
		    System.out.println("└───────────────────────────────┘");
		    System.out.print("👉 번호를 입력하세요: ");
			String  strListChoice = sc.next();
			
			try {
				int intListChoice = Integer.parseInt(strListChoice);
			
				if(intListChoice == 1) {
					System.out.println("\n📋 전체 게시글 목록\n");
					postShowAll();
					
				}else if(intListChoice == 2) {
					System.out.println("\n🔍 게시글 상세 조회");
					postShowAll();
			        System.out.print("👉 조회할 게시글 번호 입력: ");
					int num = sc.nextInt();
					postShowDetail(num);
				}else {
					System.out.println("\n\n⚠ 1, 2번만 선택할 수 있습니다. 다시 선택해주세요.\n");
				}
						
			}catch(NumberFormatException e) {
				System.out.println("\n⚠️숫자가 아닌 값을 입력했습니다.");
			}
			
		}

		//전체 목록 조회
		public void postShowAll() throws IOException {
			loadData("DataBase/data.csv");
			if (list.isEmpty()) {
				System.out.println("\n\n⚠ 등록된 게시글이 없습니다.\n");
				return;
			}

			for (Board board : list) {
				System.out.println(board);
			}
		}

		//상세보기
		public void postShowDetail(int id) throws IOException {
			
			for (Board board : list) {
				if (board.getId() == id) {
					System.out.println("\n┌───────────────────────────────┐");
		            System.out.println("│                          📌 게시글 상세보기                          │");
		            System.out.println("└───────────────────────────────┘");
					System.out.println("글번호: " + board.getId());
					System.out.println("제목: " + board.getTitle());
					System.out.println("작성자: " + board.getWriter());
					System.out.println("작성일: " + board.getRegDate());
					System.out.println("내용: " + board.getContent());
					return;
				}
			}
			System.out.println("해당 번호의 게시글이 존재하지 않습니다.");
		}
	    public  Date parseDate(String dateStr) {
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	        try {
	            return sdf.parse(dateStr.trim());
	        } catch (ParseException e) {
	            e.printStackTrace();
	            return null; // 변환 실패 시 null 반환
	        }
	
	public void postDelete(int deleteNum) {
        list .clear();
        List<Board>list =FileManager.loadData2("DataBase/data.csv");
		boolean removed = list.removeIf(board -> board.getId() == deleteNum);
        if (removed) {
            System.out.println("게시글 " + deleteNum + "번이 삭제되었습니다.");
            // 삭제 후 CSV 파일 저장
            FileManager.saveData("DataBase/data.csv",list);
        } else {
            System.out.println("해당 번호의 게시글이 존재하지 않습니다.");
        }

		
	}
	
	public static Date nowDate() {
    	return new Date(); // 현재 시간 Date 객체 그대로 반환
	}

	public static int enterNumber() {
        int firstCellLastLine = 0;

        try {
        	FileReader fr = new FileReader("DataBase/data.csv");
            BufferedReader br = new BufferedReader(fr);

            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                firstCellLastLine = Integer.parseInt(parts[0]);
            }
            return firstCellLastLine + 1;
            
            

        } catch (FileNotFoundException e) {
            return 1; // 파일 없으면 첫 번째 글 번호는 1
        } catch (IOException e) {
            e.printStackTrace();
        }

        return firstCellLastLine + 1;
    }
	
	
}
